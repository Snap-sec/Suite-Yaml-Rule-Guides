rule_name: Error-based SQL Injection

transform:
  query:
    transformations:
      - replace_all_values_one_by_one: "' OR '1'='1"
      - replace_all_values_one_by_one: "\" OR \"1\"=\"1"
      - replace_all_values_one_by_one: "1'--"
      - replace_all_values_one_by_one: "1')--"
      - replace_all_values_one_by_one: "1\"--"
      - replace_all_values_one_by_one: "'; WAITFOR DELAY '0:0:3'--"

  body:
    transformations:
      - replace_all_values_one_by_one: "' OR '1'='1"
      - replace_all_values_one_by_one: "\" OR \"1\"=\"1"
      - replace_all_values_one_by_one: "1'--"
      - replace_all_values_one_by_one: "1')--"
      - replace_all_values_one_by_one: "1\"--"
      - replace_all_values_one_by_one: "'; WAITFOR DELAY '0:0:3'--"

  header:
    transformations:
      - replace_all_values_one_by_one: "' OR '1'='1"
      - replace_all_values_one_by_one: "\" OR \"1\"=\"1"

match_on:
  body:
    contains:
      - "you have an error in your sql syntax"
      - "sql syntax error"
      - "unclosed quotation mark after the character string"
      - "quoted string not properly terminated"
      - "unknown column"
      - "unterminated string literal"
      - "conversion failed when converting the varchar"
      - "mysql_fetch_array()"
      - "warning: mysql_"
      - "org.hibernate.exception"
      - "java.sql.SQLException"
      - "SQLSTATE\\["
      - "ORA-"

report:
  title: "Error-based SQL Injection indicators found"
  description: >-
    Injecting SQL metacharacters into individual parameters caused the server to
    return database error signatures. This strongly indicates error-based SQLi.
    Original: {{original.method}} {{original.url}}
    Tested: {{req.method}} {{req.url}}
    Status: {{res.status}} | Content-Type: {{res.headers.Content-Type}}
  severity: critical
  cwe: "CWE-89"
  cvssScore: "9.0"
  mitigation: >-
    Use parameterized queries (prepared statements), apply strict server-side
    validation and encoding, disable verbose DB errors in production, and use
    least-privilege DB accounts.
  stepsToReproduce: |
    1) Send the baseline request: {{original.method}} {{original.url}}
    2) Re-send while replacing a single parameter value with a payload such as ' OR '1'='1.
    3) Observe response containing database error text (e.g., SQLSTATE[â€¦], syntax error).
    4) Repeat for other parameters to confirm the scope.
  tags: "sqli,error-based,owasp-a03"
  impact: >-
    Attackers can enumerate schema/data and potentially take over the database by
    exploiting query construction flaws revealed via verbose errors.
