rule_name: NoSQLi - error-based injection (all params)

transform:
  # Inject a $where expression that will cause a server-side JS error if blindly executed.
  # This aims to trigger database/driver errors or stack traces that reveal DB internals.
  replace_all_param_values: '{"$where":"this.nonexistentFunction()"}'

match_on:
  # Error-based NoSQLi often results in error responses or stack traces.
  status: [400, 422, 500]
  response_contains:
    - "MongoError"
    - "MongoServerError"
    - "TypeError"
    - "ReferenceError"
    - "errmsg"
    - "stack"
    - "at <anonymous>"
    - "uncaught exception"
    - "Error:"

report:
  title: "NoSQL Injection — Error-based ({{endpoint}})"
  description: |
    An injected NoSQL server-side JavaScript expression caused an error or stack trace to be returned.
    This indicates the server evaluated user-supplied expressions (e.g. `$where`) or otherwise executed untrusted input.
    • Original URL: {{original.url}}
    • Transformed request: {{req.url}}
    • Payload used: {"$where":"this.nonexistentFunction()"}
    • Response status: {{res.status}}
    • Evidence snippet: {{res.body}}
  cwe: "CWE-943"
  severity: "critical"
  cvssScore: 9.0
  mitigation: |
    - Never evaluate or execute user-supplied JavaScript on the database (avoid `$where` with untrusted input).
    - Use parameterized queries / native query operators instead of server-side JS execution.
    - Sanitize and validate inputs; disable server-side JS execution if not required.
    - Suppress verbose error messages in production; avoid returning stack traces or internal errors to clients.
  stepsToReproduce: |
    1. Take the original API request: {{original.method}} {{original.url}}
    2. Replace all parameter values with: {"$where":"this.nonexistentFunction()"}
    3. Send the transformed request to {{req.url}}.
    4. Observe server error messages, stack traces, or DB-specific error fields in the response.
  tags: "nosql-injection,error-based,mongodb,security"
  impact: "Execution of untrusted expressions, disclosure of database internals, potential for RCE or data exfiltration."
