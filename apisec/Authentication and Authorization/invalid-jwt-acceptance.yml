rule_name: Invalid Token Acceptance - Malformed/Expired JWT

transform:
  headers:
    add:
      Authorization: "Bearer invalid.jwt.token"
      Authorization: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.invalid"
      Authorization: "Bearer expired.jwt.token"
      Authorization: "Bearer malformed-jwt"
      Authorization: "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.invalid-signature"
  cookies:
    add:
      jwt: "invalid.jwt.token"
      token: "malformed-token"
      auth_token: "expired.jwt.token"

match_on:
  status: 200
  content_type: "application/json"

report:
  title: "Invalid JWT Token Acceptance Detected"
  description: |
    The API accepted malformed, expired, or invalid JWT tokens and returned successful responses.
    This indicates insufficient JWT validation that could allow unauthorized access.

    • Original URL: {{original.url}}
    • Transformed URL: {{req.url}}
    • Response Status: {{res.status}}
    • Invalid Token Used: {{req.headers.Authorization}}
  cwe: "CWE-345"
  cvssScore: "7.5"
  severity: "high"
  mitigation: |
    1. Implement proper JWT signature validation
    2. Check token expiration (exp claim)
    3. Validate token issuer (iss claim)
    4. Verify token audience (aud claim)
    5. Use strong secret keys for signing
    6. Implement token blacklisting for revoked tokens
    7. Return 401 for invalid/expired tokens
  stepsToReproduce: |
    1. Send original request to {{original.url}}
    2. Replace Authorization header with invalid JWT: {{req.headers.Authorization}}
    3. Send {{req.method}} request to {{req.url}}
    4. Observe {{res.status}} response with authenticated content
    5. Check response body for user/admin data: {{res.body}}
  tags: "jwt,invalid-token,authentication,authorization"
  impact: "Unauthorized access using invalid tokens, potential privilege escalation"
